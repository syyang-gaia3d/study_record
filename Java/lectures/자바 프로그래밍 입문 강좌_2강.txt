2강. Java 프로그램의 실행 구조
-- Java 언어를 이용해서 만들어진 프로그램이 어떻게 실행되는지 학습
	(1) 환경변수 설정
		(설치된 자바 폴더)\bin 내에 java.exe, javac.exe 위치
			- java.exe : JVM 구동 명령(자바 프로그램을 실행)
			- javac.exe : 컴파일러(코딩된 소스를 컴파일)
		위 두 파일을 디렉토리에 상관없이 실행할 수 있도록 하기 위해 bin 경로를 등록한다.
			- 사용자 변수 : 개별 사용자가 존재할 때, 각 사용자 계정이 사용하는 변수 선언
			- 시스템 변수 : 해당 pc를 사용하는 모든 사용자가 이용할 수 있는 변수 선언
		시스템 변수 -> 새로 만들기 -> 변수 이름은 반드시 "JAVA_HOME"으로, 변수 값은 경로를 지정(복사+붙여넣기 권장)
		
		시스템 변수 내 path를 클릭 -> 환경 변수 편집 창에서 새로 만들기 -> bin 파일 추가(%JAVA_HOME%\bin)으로 추가
		환경변수 설정 검증 - cmd를 켜서 java -version 명령어 입력 후, 자바 버전을 확인할 수 있으면 성공적으로 설치된 것
	
	(2) Java 컴파일러와 JVM
		java 소스 작성부터 프로그램 실행까지
		- java소스(xxx.java)-> 바이트 코드 파일(xxx.class) -> 기계어 -> 실행
		- .java -> .class : 컴파일(javac.exe 컴파일러가 실행)
		- .class 파일은 JVM이 구동되며 기계어로 번역(java.exe 실행)
		- LINK(메모리 로딩/실행준비/실행결정/초기화) : 기계어가 실행되는 동안 이뤄지는 과정
		
	(3) Java 프로그램의 실행

		실습 :: 이클립스가 아닌 메모장으로 원초적인 코딩 실행

	(4) 이클립스 사용의 장점
	
		- 컴파일, 디버깅, 실행 모두 한번에 할 수 있음!!! 매우 편리!
	
	(5) 가비지 컬렉터
		
		- 프로그램 실행에 필요한 메모리를 Gabage Collector가 자동으로 관리
		- Java 프로그램은 개발자가 메모리에 접근할 수 없음. 메모리 관리X. => 가비지 컬렉터가 알아서 메모리 최적화
		(* C계열 프로그램은 개발자가 직접 메모리를 관리해야 함. 메모리 관리를 잘못할 경우, 메모리 누수가 발생하며 타 프로그램 동작이 멈출 수 있음.)
		